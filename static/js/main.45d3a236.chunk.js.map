{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundery.js","components/CounterComponent.js","components/header.js","containers/App.js","actions.js","constant.js","reducer.js","registerServiceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","console","log","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CounterComponent","updateCount","count","nextProps","nextState","color","onClick","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","initialState","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","rootReducers","createLogger","combineReducers","action","Object","assign","store","createStore","compose","applyMiddleware","thunkMiddleware","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.45d3a236.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  console.log('CardList');\n  \n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react'\n\nclass ErrorBoundary extends Component {\n  constructor (props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  componentDidCatch (error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render () {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary","import React, {Component} from 'react';\n\nclass CounterComponent extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            count:0\n        }\n    }\n    shouldComponentUpdate(nextProps,nextState){\n        if(this.state.count!==nextState.count){\n            return true;\n        }\n    }\n\n    updateCount = () => {\n        this.setState({count:this.state.count+1})\n    }\n    render(){\n        console.log(\"Counter Component\");\n        return(\n            <button color={this.props.color} onClick={this.updateCount} >\n                Count:{this.state.count}\n            </button>\n        )\n    }\n}\n\nexport default CounterComponent;\n","import React, {Component} from 'react';\nimport CounterComponent from './CounterComponent';\n\nclass Header extends Component{\n    constructor(props){\n        super(props);\n    }\n    shouldComponentUpdate(nextProps,nextState){\n        return false;\n    }\n\n    render(){\n        console.log(\"Header\");\n        return(\n            <div>\n                <CounterComponent color={'red'} />\n                <h1 className='f1'>RoboFriends</h1>\n            </div>\n        )}\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport {connect} from 'react-redux';\nimport { setSearchField,requestRobots } from '../actions';\nimport ErrorBoundry from '../components/ErrorBoundery';\nimport Header from '../components/header';\n\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  }\n}\n\n// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\n// the function returns an object then uses connect to change the data from redecers.\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n\n  componentDidMount() {\n    console.log(this.props.onRequestRobots())\n    this.props.onRequestRobots();    \n  }\n  render() {\n    const { robots, searchField, onSearchChange, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return (\n      <div className='tc'>\n        {/* <h1 className='f1'>RoboFriends</h1> */}\n        <Header />\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n          { isPending ? <h1>Loading</h1> :\n            <ErrorBoundry>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundry>\n          }\n        </Scroll>\n      </div>\n    );\n        }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constant';\n\nexport const setSearchField = (text) => ({\n    type:CHANGE_SEARCH_FIELD,\n    payload:text\n})\n\nexport const requestRobots = ()=>(dispatch)=>{\n    dispatch({type: REQUEST_ROBOTS_PENDING})\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n      .then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data}))\n      .catch(err=>  dispatch({type:REQUEST_ROBOTS_FAILED,payload:err}))\n\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n    } from './constant';\nconst initialState = {\n    searchField:''\n}\n\nexport const searchRobots = (state=initialState,action={})=>{\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({},state,{ searchField:action.payload })\n        \n        default:\n            return state;\n    }\n\n}\nconst initialStateRobots = {\n    robots: [],\n    isPending: true\n  }\n\nexport const requestRobots = (state = initialStateRobots,action = {} )=> {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:{\n            console.log(\"^^^^^^pending state^^^^^^^\")\n            return Object.assign({},state,{isPending:true})\n        }\n\n        case REQUEST_ROBOTS_SUCCESS:{\n            console.log(\"^^^^^success^^^^^^^^\")\n            return Object.assign({},state,{robots:action.payload,isPending:false})\n        }\n\n        case REQUEST_ROBOTS_FAILED:{\n            console.log(\"^^^^^Failed^^^^^^^^\")\n            return Object.assign({},state,{error:action.payload,isPending:false})\n        }\n\n        default:\n            return state\n        \n\n    }\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore,applyMiddleware,combineReducers, compose } from 'redux';\nimport App from './containers/App';\nimport { searchRobots,requestRobots } from './reducer';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nconst logger = createLogger();\nconst rootReducers = combineReducers({ searchRobots, requestRobots});\n\nconst store = createStore(\n    rootReducers,\n    compose(\n    applyMiddleware(thunkMiddleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    ));\n\n\n\nReactDOM.render(\n    <Provider store={store} >\n        <App />\n</Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}